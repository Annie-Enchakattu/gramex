variables:
  MYSQL_SERVER: {default: localhost}
  POSTGRES_SERVER: {default: localhost}

app:
  listen:
    port: 9999              # Avoid clash with default Gramex port running tests
  settings:
    xsrf_cookies: false     # Temporarily disable for testing

cache:
    memory:
        type: memory
    memory-20:
        type: memory
        size: 20
    disk:
        type: disk
        path: $YAMLPATH/.cache-url
    # We could test more disk caches, but they're slow

url:
  invalid-handler:
    pattern: /invalid-handler
    handler: NonExistent
  invalid-function:
    pattern: /invalid-function
    handler: FunctionHandler
    kwargs:
        function: nonexistent

  # TestGramex
  pathdepth1: {pattern: "/path/.*",       handler: "gramex.handlers.FunctionHandler", kwargs: {function: "str", args: ["/path/.*"],       }}
  pathdepth2: {pattern: "/path/file",     handler: FunctionHandler, kwargs: {function: str, args: ["/path/file"],     }}
  pathdepth3: {pattern: "/path/dir/.*",   handler: FunctionHandler, kwargs: {function: str, args: ["/path/dir/.*"],   }}
  pathdepth4: {pattern: "/path/dir/file", handler: FunctionHandler, kwargs: {function: str, args: ["/path/dir/file"], }}
  pathdepth5: {pattern: "/path/priority", priority: 1, handler: "FunctionHandler", kwargs: {function: "str", args: ["/path/priority"], }}

  pathnorm1: {pattern: "/./path/norm1", handler: FunctionHandler, kwargs: {function: str, args: ["/path/norm1"],    }}
  pathnorm2: {pattern: "/path/./norm2", handler: FunctionHandler, kwargs: {function: str, args: ["/path/norm2"],    }}

  # TestFunctionHandler
  func/args:
    pattern: /func/args
    handler: FunctionHandler
    kwargs:
      function: utils.params_as_json
      args: [0, 1]
      kwargs:
        a: "a"
        b: "b"

  func/async/args:
    pattern: /func/async/args
    handler: FunctionHandler
    kwargs:
      function: utils.async_args
      args: [0, 1]
      kwargs:
        a: "a"
        b: "b"

  func/handler:
    pattern: /func/handler
    handler: FunctionHandler
    kwargs:
      function: utils.params_as_json

  func/attributes:
    pattern: /func/attributes
    handler: FunctionHandler
    kwargs:
        function: utils.attributes

  func/composite:
    pattern: /func/composite
    handler: FunctionHandler
    kwargs:
      function: utils.params_as_json
      args: [0, =handler]
      kwargs:
        a: a
        handler: =handler

  func/compositenested:
    pattern: /func/compositenested
    handler: FunctionHandler
    kwargs:
      function: utils.params_as_json
      args: [0, =handler]
      kwargs:
        a:
          b: 1
        handler: =handler

  func/dumpx:
    pattern: /func/dumpx
    handler: FunctionHandler
    kwargs:
      function: utils.params_as_json
      args: =handler.get_arguments('x')

  func/async/http:
    pattern: /func/async/http
    handler: FunctionHandler
    kwargs:
      function: utils.async_http
      args: "http://localhost:9999/func/dumpx?x=1&x=2"

  func/async/http2:
    pattern: /func/async/http2
    handler: FunctionHandler
    kwargs:
      function: utils.async_http2
      args:
        - "http://localhost:9999/func/dumpx?x=1"
        - "http://localhost:9999/func/dumpx?x=2"

  func/async/calc:
    pattern: /func/async/calc
    handler: FunctionHandler
    kwargs:
      function: utils.async_calc

  func/iterator:
    pattern: /func/iterator
    handler: FunctionHandler
    kwargs:
      function: utils.iterator

  func/iterator/async:
    pattern: /func/iterator/async
    handler: FunctionHandler
    kwargs:
      function: utils.iterator_async

  # TestFileHandler
  dir/noindex:
    pattern: /dir/noindex/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      index: false
  dir/index:
    pattern: /dir/index/(.*)
    handler: FileHandler
    kwargs:
      # Adding a slash at the end of "dir/" should not disrupt anything
      path: dir/
      index: true
  dir/default-present-index:
    pattern: /dir/default-present-index/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      default_filename: index.html
      index: true
  dir/default-missing-index:
    pattern: /dir/default-missing-index/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      default_filename: nonexistent-file
      index: true
  dir/default-present-noindex:
    pattern: /dir/default-present-noindex/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      default_filename: index.html
      index: false
  dir/default-missing-noindex:
    pattern: /dir/default-missing-noindex/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      default_filename: nonexistent-file
      index: false
  dir/indextemplate:
    pattern: /dir/indextemplate/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      index: true
      index_template: index.template.html
  dir/no-indextemplate:
    pattern: /dir/no-indextemplate/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      index: true
      index_template: nonexistent.template.html
  dir/nonexistent-file:
    pattern: /dir/nonexistent-file
    handler: FileHandler
    kwargs:
      path: nonexistent-file
  dir/single-file:
    pattern: /dir/single-file/(.*)
    handler: FileHandler
    kwargs:
      path: dir/text.txt
  dir/normalize/slash:
    pattern: /dir/normalize/slash/(.*)/
    handler: FileHandler
    kwargs:
      path: dir
  dir/normalize/dot:
    pattern: /./dir/./normalize/./dot/./(.*)
    handler: FileHandler
    kwargs:
      path: dir
  dir/normalize/dotdot:
    pattern: /abc/../dir/normalize/abc/../dotdot/(.*)
    handler: FileHandler
    kwargs:
      path: dir
  dir/transform:
    pattern: /dir/transform/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      transform:
        "*.md":
          encoding: utf-8
          function: markdown.markdown
          args: =content
          headers:
            Content-Type: text/html; charset=UTF-8
        "*.yaml":
          encoding: utf-8
          function: badgerfish
          args: [=content, =handler]
          headers:
            Content-Type: text/html; charset=UTF-8
        "template.*":
          encoding: utf-8
          function: template
          args: =content
          kwargs:
            handler: =handler
            param: x
          headers:
            Content-Type: text/html; charset=UTF-8
        "template-handler.txt":
            encoding: utf-8
            function: template
  dir/template:
    pattern: "/dir/template/(.*)"
    handler: FileHandler
    kwargs:
        path: dir/
        template: '*'
  dir/template-true:
    pattern: "/dir/template-true/(.*)"
    handler: FileHandler
    kwargs:
        path: dir/
        template: true
  dir/template-index:
    pattern: "/dir/template-index/(.*)"
    handler: FileHandler
    kwargs:
        path: dir/
        template: 'index*'
  dir/args:
    pattern: /dir/args/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      default_filename: index.html
      transform:
        'index.html':
          function: utils.args_as_json
          args: =handler
  dir/merge.txt:
    pattern: /dir/merge.txt
    handler: FileHandler
    kwargs:
      path:
        - dir/alpha.txt
        - dir/beta.html
      transform:
        'alpha.txt':
          encoding: utf-8
          function: six.text_type.upper
          args: =content
        'beta.html':
          encoding: utf-8
          function: six.text_type.title
          args: =content
  dir/merge.html:
    pattern: /dir/merge.html
    handler: FileHandler
    kwargs:
      path:
        - dir/beta.html
        - dir/alpha.txt
      transform:
        'beta.html':
          encoding: utf-8
          function: six.text_type.upper
          args: =content
        'alpha.txt':
          encoding: utf-8
          function: six.text_type.title
          args: =content

  dir/data:
    pattern: /dir/data                # Check that a pattern without brackets works
    handler: FileHandler
    kwargs:
      path: dir/data.csv
      headers:
        Content-Type: text/plain      # Test header overriding
        Content-Disposition: null     # Test header clearing

  dir/pattern-text:
    pattern: "/dir/pattern/(.*)/text"
    handler: FileHandler
    kwargs:
      path: "dir/*.txt"

  dir/pattern-html:
    pattern: "/dir/pattern/(.*)\\.web"
    handler: FileHandler
    kwargs:
      path: "dir/*.html"

  dir/pattern-subdir:
    pattern: "/dir/pattern/(.*)/sub"
    handler: FileHandler
    kwargs:
      path: "dir/*/text.txt"

  dir/ignore-file:
    pattern: "/dir/ignore-file/(.*)"
    handler: FileHandler
    kwargs:
      path: dir/
      ignore: ignore-file.txt

  dir/ignore-list:
    pattern: "/dir/ignore-list/(.*)"
    handler: FileHandler
    kwargs:
      path: dir/
      ignore:
        - ignore-list.txt

  # Allow overrides global handler ignores
  dir/allow-file:
    pattern: "/dir/allow-file/(.*)"
    handler: FileHandler
    kwargs:
      path: dir/
      allow: gramex.yaml

  # Allow overrides local ignores
  dir/allow-ignore:
    pattern: "/dir/allow-ignore/(.*)"
    handler: FileHandler
    kwargs:
      path: dir/
      ignore: ignore-file.txt
      allow: ignore-file.txt

  methods/get-only:
    pattern: /methods/get-only
    handler: FileHandler
    kwargs:
        path: index.template.html
        methods: GET
  methods/head-put-delete:
    pattern: /methods/head-put-delete
    handler: FileHandler
    kwargs:
        path: index.template.html
        methods: [HEAD, put, DELete]


  # TestDataHandler for Sqlite
  data/csv:
    pattern: /datastore/sqlite/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: csv}
      headers: {X-Test: abc}
  data/json:
    pattern: /datastore/sqlite/json/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: json}
      headers: {X-Test: abc}
  data/html:
    pattern: /datastore/sqlite/html/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: html}
      headers: {X-Test: abc}
  data/xlsx:
    pattern: /datastore/sqlite/xlsx/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: xlsx}
      headers: {X-Test: abc}

  # Test datahandler for MySQL
  data/mysql/csv:
    pattern: /datastore/mysql/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8, connect_args: {charset: utf8}}
      default: {format: csv}
      headers: {X-Test: abc}
  data/mysql/json:
    pattern: /datastore/mysql/json/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8, connect_args: {charset: utf8}}
      default: {format: json}
      headers: {X-Test: abc}
  data/mysql/html:
    pattern: /datastore/mysql/html/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8, connect_args: {charset: utf8}}
      default: {format: html}
      headers: {X-Test: abc}
  data/mysql/xlsx:
    pattern: /datastore/mysql/xlsx/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8, connect_args: {charset: utf8}}
      default: {format: xlsx}
      headers: {X-Test: abc}

  # Test datahandler for PostgreSQL
  data/postgresql/csv:
    pattern: /datastore/postgresql/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: csv}
      headers: {X-Test: abc}
  data/postgresql/json:
    pattern: /datastore/postgresql/json/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: json}
      headers: {X-Test: abc}
  data/postgresql/html:
    pattern: /datastore/postgresql/html/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: html}
      headers: {X-Test: abc}
  data/postgresql/xlsx:
    pattern: /datastore/postgresql/xlsx/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: xlsx}
      headers: {X-Test: abc}

  # TestDataHandler for blaze sqlite
  data/blaze/csv:
    pattern: /datastore/blazesqlite/csv/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: csv}
      headers: {X-Test: abc}
  data/blaze/json:
    pattern: /datastore/blazesqlite/json/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: json}
      headers: {X-Test: abc}
  data/blaze/html:
    pattern: /datastore/blazesqlite/html/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: html}
      headers: {X-Test: abc}
  data/blaze/xlsx:
    pattern: /datastore/blazesqlite/xlsx/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: xlsx}
      headers: {X-Test: abc}

  # Test datahandler for blaze MySQL
  data/blazemysql/csv:
    pattern: /datastore/blazemysql/csv/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: csv}
      headers: {X-Test: abc}
  data/blazemysql/json:
    pattern: /datastore/blazemysql/json/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: json}
      headers: {X-Test: abc}
  data/blazemysql/html:
    pattern: /datastore/blazemysql/html/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: html}
      headers: {X-Test: abc}
  data/blazemysql/xlsx:
    pattern: /datastore/blazemysql/xlsx/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: xlsx}
      headers: {X-Test: abc}

  # TestDataHandlerConfig for Sqlite
  data/sqliteconfig1/csv:
    pattern: /datastore/sqliteconfig1/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
        where: [votes<120]
      headers: {X-Test: abc}
  data/sqliteconfig2/csv:
    pattern: /datastore/sqliteconfig2/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
        where: votes<120
      headers: {X-Test: abc}
  data/sqliteconfig3/csv:
    pattern: /datastore/sqliteconfig3/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
      query:
        where: votes<120
      headers: {X-Test: abc}
  data/sqliteconfig4/csv:
    pattern: /datastore/sqliteconfig4/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
        select: ["rating", "votes"]
      query:
        where: votes<120
      headers: {X-Test: abc}
  data/sqliteconfig5/csv:
    pattern: /datastore/sqliteconfig5/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
        select:
          rating: "any-value"
          votes:
      query:
        where: votes<120
      headers: {X-Test: abc}
  data/sqliteconfig6/csv:
    pattern: /datastore/sqliteconfig6/csv/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
        select: ["category", "votenu"]
        groupby: "category"
      query:
        agg:
          ratemean: mean(rating)
          votenu: nunique(votes)
        where:
          votes: "<120"
          rating: ">0.4"
      headers: {X-Test: abc}
  data/sqliteconfig7/csv:
    pattern: /datastore/sqliteconfig7/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      query:
        format: csv
        where: [votes<120]
        limit: 5
      headers: {X-Test: abc}

  process/args:
    pattern: /process/args
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
  process/args-pipe:
    pattern: /process/args-pipe
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
      stdout: pipe
      stderr: pipe
  process/args-no-stderr:
    pattern: /process/args-no-stderr
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
      stderr: false
  process/args-no-stdout:
    pattern: /process/args-no-stdout
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
      stdout: false
  process/args-stdout-file:
    pattern: /process/args-stdout-file
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
      stdout: $YAMLPATH/processtest.stdout
  process/args-both-file:
    pattern: /process/args-both-file
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
      stdout: $YAMLPATH/processtest.both
      stderr: $YAMLPATH/processtest.both
  process/args-multi-file:
    pattern: /process/args-multi-file
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
      stdout: [$YAMLPATH/processtest.stdout.1, $YAMLPATH/processtest.stdout.2, pipe]
      stderr: [$YAMLPATH/processtest.stderr.1, $YAMLPATH/processtest.stderr.2, pipe]
  process/shell:
    pattern: /process/shell
    handler: ProcessHandler
    kwargs:
      args: 'python $YAMLPATH/processtest.py a 1 "x y"'
      shell: True
  process/cwd:
    pattern: /process/cwd
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
      cwd: "${YAMLPATH}/../"
  process/nonexistent-command:
    pattern: /process/nonexistent-command
    handler: ProcessHandler
    kwargs:
      args: nonexistent-command
  process/error:
    pattern: /process/error
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/throwerror.py"]

  httpbin:
    pattern: /httpbin
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin
  cache/randomchar-nocache:
    pattern: /cache/randomchar-nocache
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin
      kwargs: {rand: 99999999}
  cache/randomchar:
    pattern: /cache/randomchar
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin
      kwargs: {rand: 99999999, mime: html}
    cache: true
  cache/pathkey:
    pattern: /cache/pathkey
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin
      kwargs: {rand: 99999999, mime: json}
    cache:
      key: request.path
  cache/host:
    pattern: /cache/host.*
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin
      kwargs: {rand: 99999999}
    cache:
      key: request.host
  cache/args:
    pattern: /cache/args.*
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin
      kwargs: {rand: 99999999}
    cache:
      key: [request.path, args.x, invalid.key]
  cache/cookie-test:
    pattern: /cache/cookie-test
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin
      kwargs: {rand: 99999999}
    cache:
      key: [request.host, cookies.user, invalid.key]
  cache/header-test:
    pattern: /cache/header-test
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin
      kwargs: {rand: 99999999}
    cache:
      key: [request.host, headers.test, invalid.key]
  cache/invalid-keys-ignored:
    pattern: /cache/invalid-keys-ignored.*
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin
      kwargs: {rand: 99999999}
    cache:
      key: [invalid, invalid.invalid]
  cache/filehandler:
    pattern: /cache/filehandler/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      allow: .cache-file*
    cache: true
  cache/filehandler-errors:
    pattern: /cache/filehandler-error/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      allow: .cache-file*
    cache:
        status: [200, 404]

  json/get:
    pattern: /json/get/(.*)
    handler: JSONHandler
    kwargs:
        data:
            x: "1"
            y: {z: 2}
            z: [a, b, {m: 1, n: 2}]
  json/write:
    pattern: /json/write/(.*)
    handler: JSONHandler
  json/path:
    pattern: /json/path/(.*)
    handler: JSONHandler
    kwargs:
      path: $YAMLPATH/.jsonpath/jsonhandler.json

  api/twitter:
    pattern: /api/twitter/(.*)
    handler: TwitterRESTHandler
    kwargs:
      # Gramener > Gramex guide app: https://apps.twitter.com/app/12449610/keys
      key: XkCVNZD5sfWECxHGAGnlHGQFa
      secret: yU00bx5dHYMbge9IyO5H1KeC5uFnWndntG7u6CH6O4HDZHQg0p
      access_key: 445767176-pqio8PuGlpzULSstlZQbLhRqFJfNBjWFH5LqNRgI
      access_secret: zVosr4wIS3aM80hErmWUkMePZ6vX830yI7VKxar6xZqgp

  api/twitter-get:
    pattern: /api/twitter-get/(.*)
    handler: TwitterRESTHandler
    kwargs:
      # Gramener > Gramex guide app: https://apps.twitter.com/app/12449610/keys
      key: XkCVNZD5sfWECxHGAGnlHGQFa
      secret: yU00bx5dHYMbge9IyO5H1KeC5uFnWndntG7u6CH6O4HDZHQg0p
      access_key: 445767176-pqio8PuGlpzULSstlZQbLhRqFJfNBjWFH5LqNRgI
      access_secret: zVosr4wIS3aM80hErmWUkMePZ6vX830yI7VKxar6xZqgp
      methods: GET

  upload:
    pattern: /upload
    handler: UploadHandler
    kwargs:
      path: $YAMLPATH/uploads
      keys:
        file: [image, text, unknown]
        delete: rm

  auth/session:
    pattern: /auth/session
    handler: FunctionHandler
    kwargs:
        function: utils.session
        headers:
            Content-Type: application/json

  auth/ldap:
    pattern: /auth/ldap
    handler: LDAPAuth
    kwargs:
        template: $YAMLPATH/auth.html       # This has the login form
        host: ipa.demo1.freeipa.org         # Server to connect to
        use_ssl: true                       # Whether to use SSL or not
        user: 'uid={user},cn=users,cn=accounts,dc=demo1,dc=freeipa,dc=org'
        password: '{password}'

  auth/simple:
    pattern: /auth/simple
    handler: SimpleAuth
    kwargs:
        template: $YAMLPATH/auth.html
        user: {arg: user}
        password: {arg: password}
        credentials:
            alpha: alpha
            beta: beta
        redirect:
            query: next
            header: NEXT
            url: /dir/index/
        action:
            -
              function: utils.set_session
              kwargs:
                action_set: true
            -
              function: ensure_single_session

  auth/db:
    pattern: /auth/db
    handler: DBAuth
    kwargs:
        template: $YAMLPATH/auth.html
        # This is created by schedule.create-user-database
        url: 'mysql+pymysql://root@${MYSQL_SERVER}/test_auth'
        table: users
        user:
            column: user
            arg: user
        password:
            column: password
            arg: password
            function: six.text_type.__add__
            args: [=content, '123']
        redirect:
            query: next
            header: NEXT
            url: /dir/index/

  auth/functionhandler:
    pattern: /auth/functionhandler
    handler: FunctionHandler
    kwargs:
        auth: true
        function: six.text_type
        args: 'OK'
  auth/filehandler:
    pattern: /auth/filehandler
    handler: FileHandler
    kwargs:
        auth: true
        path: dir/alpha.txt
  auth/datahandler:
    pattern: /auth/datahandler
    handler: DataHandler
    kwargs:
        auth: true
        driver: sqlalchemy
        url: sqlite:///actors.db        # This dataset doesn't actually exist
        table: actors
  auth/jsonhandler:
    pattern: /auth/jsonhandler/(.*)
    handler: JSONHandler
    kwargs:
        auth: true
        data: {x: 1}
  auth/processhandler:
    pattern: /auth/processhandler
    handler: ProcessHandler
    kwargs:
        auth: true
        args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
  auth/twitterresthandler:
    pattern: /auth/twitterresthandler
    handler: TwitterRESTHandler
    kwargs:
      auth: true
      # Gramener > Gramex guide app: https://apps.twitter.com/app/12449610/keys
      key: XkCVNZD5sfWECxHGAGnlHGQFa
      secret: yU00bx5dHYMbge9IyO5H1KeC5uFnWndntG7u6CH6O4HDZHQg0p
      access_key: 445767176-pqio8PuGlpzULSstlZQbLhRqFJfNBjWFH5LqNRgI
      access_secret: zVosr4wIS3aM80hErmWUkMePZ6vX830yI7VKxar6xZqgp
  auth/uploadhandler:
    pattern: /auth/uploadhandler
    handler: UploadHandler
    kwargs:
      auth: true
      path: $YAMLPATH/uploads
      methods: GET
  auth/membership:
    pattern: /auth/membership
    handler: FileHandler
    kwargs:
        path: dir/alpha.txt
        auth:
            membership:
                user: [alpha, beta]
  auth/condition:
    pattern: /auth/condition
    handler: FileHandler
    kwargs:
        path: dir/alpha.txt
        auth:
            condition:
                function: str.endswith
                args: [=handler.current_user.user, 'ta']        # beta, delta

  xsrf:
    pattern: /xsrf
    handler: FunctionHandler
    kwargs:
        function: "str"
        args: "xsrf"
        set_xsrf: true

  logtest:
    pattern: /logtest
    handler: FunctionHandler
    kwargs:
        function: utils.logtest
        log:
            format: '%(method)s %(uri)s %(ip)s %(status)s %(duration)s %(args.x)s %(headers.head)s %(cookies.sid)s %(user.id)s %(env.HOME)s'

  error/404-template:
    pattern: /error/404-template(.*)
    handler: FileHandler
    kwargs:
        path: $YAMLPATH/dir/
        error:
            404:
                path: $YAMLPATH/error-404.json
                autoescape: false
                whitespace: single
  error/500-function:
    pattern: /error/500-function
    handler: FunctionHandler
    kwargs:
        function: utils.zero_division_error
        error:
            500:
                function: utils.handle_error
                headers:
                    Content-Type: application/json

# Display Gramex logs on console with indentation
log:
    version: 1
    root:
        level: DEBUG
        handlers:
            - error
    handlers:
        error:
            class: logging.StreamHandler
            level: INFO
            stream: ext://sys.stdout
            formatter: inline
    formatters:
        inline:
            format: '        %(message)s'

watch:
  watch_template:
    paths: watcher.txt
    on_modified: utils.on_modified
    on_created: utils.on_created
    on_deleted: utils.on_deleted
  watch_patterns:
    paths:
        - dir/
        - watch.*.test
    on_created: utils.on_created
    on_modified: utils.on_modified
    on_deleted: utils.on_deleted
  no-paths: {}
  no-events:
    paths: dir
  invalid-event:
    paths: dir
    on_modified: nonexistent            # This should not throw an error, only report a warning

schedule:
  schedule-startup-set-key:
    function: utils.slow_count          # Set global value schedule-key to 1
    args: ['schedule-key', 1]
    startup: true
  schedule-startup-slow:
    function: utils.slow_count          # Set global schedule-count every 10ms
    args: 'schedule-count'
    kwargs: {count: 1000}
    startup: true
    thread: true
