app:
  listen:
    port: 9999      # Use a diffent port for testing

url:
  # TestGramex
  pathdepth1: {pattern: "/path/.*",       handler: "gramex.handlers.FunctionHandler", kwargs: {function: "str", args: ["/path/.*"],       }}
  pathdepth2: {pattern: "/path/file",     handler: "gramex.handlers.FunctionHandler", kwargs: {function: "str", args: ["/path/file"],     }}
  pathdepth3: {pattern: "/path/dir/.*",   handler: "gramex.handlers.FunctionHandler", kwargs: {function: "str", args: ["/path/dir/.*"],   }}
  pathdepth4: {pattern: "/path/dir/file", handler: "gramex.handlers.FunctionHandler", kwargs: {function: "str", args: ["/path/dir/file"], }}
  pathdepth5: {pattern: "/path/priority", priority: 1, handler: "gramex.handlers.FunctionHandler", kwargs: {function: "str", args: ["/path/priority"], }}

  # TestFunctionHandler
  func/args:
    pattern: /func/args
    handler: gramex.handlers.FunctionHandler
    kwargs:
      function: utils.params_as_json
      args: [0, 1]
      kwargs:
        a: "a"
        b: "b"

  func/async_args:
    pattern: /func/async_args
    handler: gramex.handlers.FunctionHandler
    kwargs:
      function: utils.async_args
      args: [0, 1]
      kwargs:
        a: "a"
        b: "b"

  func/handler:
    pattern: /func/handler
    handler: gramex.handlers.FunctionHandler
    kwargs:
      function: utils.params_as_json

  func/composite:
    pattern: /func/composite
    handler: gramex.handlers.FunctionHandler
    kwargs:
      function: utils.params_as_json
      args: [0, =handler]
      kwargs:
        a: a
        handler: =handler

  func/dumpx:
    pattern: /func/dumpx
    handler: gramex.handlers.FunctionHandler
    kwargs:
      function: utils.params_as_json
      args: =handler.get_arguments('x')

  func/async_http:
    pattern: /func/async_http
    handler: gramex.handlers.FunctionHandler
    kwargs:
      function: utils.async_http
      args: "http://localhost:9999/func/dumpx?x=1&x=2"

  func/async_http2:
    pattern: /func/async_http2
    handler: gramex.handlers.FunctionHandler
    kwargs:
      function: utils.async_http2
      args:
        - "http://localhost:9999/func/dumpx?x=1"
        - "http://localhost:9999/func/dumpx?x=2"

  func/async_calc:
    pattern: /func/async_calc
    handler: gramex.handlers.FunctionHandler
    kwargs:
      function: utils.async_calc

  # TestDirectoryHandler
  dir/noindex:
    pattern: /dir/noindex/(.*)
    handler: gramex.handlers.DirectoryHandler
    kwargs:
      path: dir
      index: false
  dir/index:
    pattern: /dir/index/(.*)
    handler: gramex.handlers.DirectoryHandler
    kwargs:
      path: dir
      index: true
  dir/default-present-index:
    pattern: /dir/default-present-index/(.*)
    handler: gramex.handlers.DirectoryHandler
    kwargs:
      path: dir
      default_filename: index.html
      index: true
  dir/default-missing-index:
    pattern: /dir/default-missing-index/(.*)
    handler: gramex.handlers.DirectoryHandler
    kwargs:
      path: dir
      default_filename: nonexistent-file
      index: true
  dir/default-present-noindex:
    pattern: /dir/default-present-noindex/(.*)
    handler: gramex.handlers.DirectoryHandler
    kwargs:
      path: dir
      default_filename: index.html
      index: false
  dir/default-missing-noindex:
    pattern: /dir/default-missing-noindex/(.*)
    handler: gramex.handlers.DirectoryHandler
    kwargs:
      path: dir
      default_filename: nonexistent-file
      index: false
  dir/transform:
    pattern: /dir/transform/(.*)
    handler: gramex.handlers.DirectoryHandler
    kwargs:
      path: dir
      transform:
        "*.md":
          encoding: utf-8
          function: markdown.markdown
          args: =content
          headers:
            Content-Type: text/html; charset=utf-8
        "*.yaml":
          encoding: utf-8
          function: gramex.transforms.badgerfish
          args: [=content, =handler]
          headers:
            Content-Type: text/html; charset=utf-8
  dir/args:
    pattern: /dir/args/(.*)
    handler: gramex.handlers.DirectoryHandler
    kwargs:
      path: dir
      default_filename: index.html
      transform:
        'index.html':
          function: utils.args_as_json
          args: =handler

  # TestDataHandler for Sqlite
  data/csv:
    pattern: /datastore/sqlite/csv/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: csv}
  data/json:
    pattern: /datastore/sqlite/json/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: json}
  data/html:
    pattern: /datastore/sqlite/html/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: html}

  # Test datahandler for MySQL
  data/mysql/csv:
    pattern: /datastore/mysql/csv/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@localhost/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: csv}
  data/mysql/json:
    pattern: /datastore/mysql/json/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@localhost/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: json}
  data/mysql/html:
    pattern: /datastore/mysql/html/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@localhost/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: html}

  # Test datahandler for PostgreSQL
  data/postgresql/csv:
    pattern: /datastore/postgresql/csv/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@localhost/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: csv}
  data/postgresql/json:
    pattern: /datastore/postgresql/json/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@localhost/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: json}
  data/postgresql/html:
    pattern: /datastore/postgresql/html/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@localhost/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: html}

  # TestDataHandler for blaze sqlite
  data/blaze/csv:
    pattern: /datastore/blazesqlite/csv/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: blaze
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: csv}
  data/blaze/json:
    pattern: /datastore/blazesqlite/json/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: blaze
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: json}
  data/blaze/html:
    pattern: /datastore/blazesqlite/html/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: blaze
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: html}

  # Test datahandler for blaze MySQL
  data/blazemysql/csv:
    pattern: /datastore/blazemysql/csv/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: blaze
      url: mysql+pymysql://root@localhost/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: csv}
  data/blazemysql/json:
    pattern: /datastore/blazemysql/json/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: blaze
      url: mysql+pymysql://root@localhost/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: json}
  data/blazemysql/html:
    pattern: /datastore/blazemysql/html/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: blaze
      url: mysql+pymysql://root@localhost/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: html}

  # TestDataHandlerConfig for Sqlite
  data/sqliteconfig1/csv:
    pattern: /datastore/sqliteconfig1/csv/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
        where: [votes<120]
  data/sqliteconfig2/csv:
    pattern: /datastore/sqliteconfig2/csv/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
        where: votes<120
  data/sqliteconfig3/csv:
    pattern: /datastore/sqliteconfig3/csv/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
      query:
        where: votes<120
  data/sqliteconfig4/csv:
    pattern: /datastore/sqliteconfig4/csv/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
        select: ["rating", "votes"]
      query:
        where: votes<120
  data/sqliteconfig5/csv:
    pattern: /datastore/sqliteconfig5/csv/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
        select:
          rating: "any-value"
          votes:
      query:
        where: votes<120
  data/sqliteconfig6/csv:
    pattern: /datastore/sqliteconfig6/csv/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: blaze
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
        select: ["category", "votenu"]
        groupby: "category"
      query:
        agg:
          ratemean: mean(rating)
          votenu: nunique(votes)
        where:
          votes: "<120"
          rating: ">0.4"
  data/sqliteconfig7/csv:
    pattern: /datastore/sqliteconfig7/csv/
    handler: gramex.handlers.DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      query:
        format: csv
        where: [votes<120]
        limit: 5

# Store Gramex logs in gramex.log
log:
    version: 1
    root:
        level: DEBUG
        handlers:
            - filehandler
    handlers:
        filehandler:
            class: logging.handlers.TimedRotatingFileHandler
            level: DEBUG
            filename: gramex.log
            formatter: file
            when: 'D'
            backupCount: 3
    loggers:
        tornado.access: {}
        tornado.application: {}
        tornado.general: {}
    formatters:
        file:
            format: '%(levelname)1.1s,%(asctime)s,%(module)s,%(lineno)d,"%(message)s"'
            datefmt: '%Y-%m-%d %H:%M:%S'
