variables:
  MYSQL_SERVER: {default: localhost}
  POSTGRES_SERVER: {default: localhost}
  STRING: abc
  NUMBER: 1
  LIST: [1, 2, 3]
  DICT: {b: 1}

handlers:
  BaseHandler:
    headers:
      X-BaseHandler: base
  FileHandler:
    headers:
      X-FileHandler: base
      X-FileHandler-Base: base

app:
  listen:
    port: 9999              # Avoid clash with default Gramex port running tests
  session:
    private_key: $YAMLPATH/id_rsa

cache:
  memory:
    type: memory
  memory-20:
    type: memory
    size: 20
  disk:
    type: disk
    path: $YAMLPATH/.cache-url
  # We could test more disk caches, but they're slow

url:
  invalid-handler:
    pattern: /invalid-handler
    handler: NonExistent
  invalid-function:
    pattern: /invalid-function
    handler: FunctionHandler
    kwargs:
        function: nonexistent

  # TestGramex
  pathdepth1: {pattern: "/path/.*",       handler: "gramex.handlers.FunctionHandler", kwargs: {function: str("/path/.*")}}
  pathdepth2: {pattern: "/path/file",     handler: FunctionHandler, kwargs: {function: str("/path/file")     }}
  pathdepth3: {pattern: "/path/dir/.*",   handler: FunctionHandler, kwargs: {function: str("/path/dir/.*")   }}
  pathdepth4: {pattern: "/path/dir/file", handler: FunctionHandler, kwargs: {function: str("/path/dir/file") }}
  pathdepth5: {pattern: "/path/priority", priority: 1, handler: "FunctionHandler", kwargs: {function: str("/path/priority") }}

  pathnorm1: {pattern: "/./path/norm1", handler: FunctionHandler, kwargs: {function: str("/path/norm1") }}
  pathnorm2: {pattern: "/path/./norm2", handler: FunctionHandler, kwargs: {function: str("/path/norm2") }}

  # TestFunctionHandler
  func/args:
    pattern: /func/args
    handler: FunctionHandler
    kwargs:
      function: utils.params_as_json(0, 1, a="a", b="b")

  func/args-split:
    pattern: /func/args-split
    handler: FunctionHandler
    kwargs:
      function: utils.params_as_json
      args: [0, 1]
      kwargs: {a: a, b: b}

  func/args-variable:
    pattern: /func/args-variable
    handler: FunctionHandler
    kwargs:
      function: utils.params_as_json("$STRING", $NUMBER, a="$STRING", b=$NUMBER)

  func/async/args:
    pattern: /func/async/args
    handler: FunctionHandler
    kwargs:
      function: utils.async_args(0, 1, a="a", b="b")

  func/async/args-split:
    pattern: /func/async/args-split
    handler: FunctionHandler
    kwargs:
      function: utils.async_args
      args: [0, 1]
      kwargs: {a: a, b: b}

  func/handler:
    pattern: /func/handler
    handler: FunctionHandler
    kwargs:
      function: utils.params_as_json

  func/handler-null:
    pattern: /func/handler-null
    handler: FunctionHandler
    kwargs:
      function: utils.params_as_json()

  func/attributes:
    pattern: /func/attributes
    handler: FunctionHandler
    kwargs:
      function: utils.attributes

  func/composite:
    pattern: /func/composite
    handler: FunctionHandler
    kwargs:
      function: utils.params_as_json(0, handler, a="a", handler=handler)

  func/compositenested:
    pattern: /func/compositenested
    handler: FunctionHandler
    kwargs:
      function: 'utils.params_as_json(0, handler, a={"b": 1}, handler=handler)'

  func/compositenested-split:
    pattern: /func/compositenested-split
    handler: FunctionHandler
    kwargs:
      function: utils.params_as_json
      args: [0, =handler]
      kwargs: {a: {b: 1}, handler: =handler}

  func/compositenested-variable:
    pattern: /func/compositenested-variable
    handler: FunctionHandler
    kwargs:
      function: utils.params_as_json
      args: [0, =handler]
      kwargs: {a: $DICT, handler: =handler}

  func/dumpx:
    pattern: /func/dumpx
    handler: FunctionHandler
    kwargs:
      function: utils.params_as_json(handler.get_arguments('x'))

  func/async/http:
    pattern: /func/async/http
    handler: FunctionHandler
    kwargs:
      function: utils.async_http("http://localhost:9999/func/dumpx?x=1&x=2")

  func/async/http2:
    pattern: /func/async/http2
    handler: FunctionHandler
    kwargs:
      function: utils.async_http2
      args:
        - "http://localhost:9999/func/dumpx?x=1"
        - "http://localhost:9999/func/dumpx?x=2"

  func/async/calc:
    pattern: /func/async/calc
    handler: FunctionHandler
    kwargs:
      function: utils.async_calc

  func/iterator:
    pattern: /func/iterator
    handler: FunctionHandler
    kwargs:
      function: utils.iterator

  func/iterator/async:
    pattern: /func/iterator/async
    handler: FunctionHandler
    kwargs:
      function: utils.iterator_async

  func/redirect:
    pattern: /func/redirect
    handler: FunctionHandler
    kwargs:
      function: utils.increment_header
      redirect:
        query: next
        header: NEXT
        url: /dir/index/

  func/argparse:
    pattern: /func/argparse
    handler: FunctionHandler
    kwargs:
      function: utils.argparse

  # TestFileHandler
  dir/noindex:
    pattern: /dir/noindex/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      index: false
  dir/index:
    pattern: /dir/index/(.*)
    handler: FileHandler
    kwargs:
      # Adding a slash at the end of "dir/" should not disrupt anything
      path: dir/
      index: true
  dir/default-present-index:
    pattern: /dir/default-present-index/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      default_filename: index.html
      index: true
  dir/default-missing-index:
    pattern: /dir/default-missing-index/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      default_filename: nonexistent-file
      index: true
  dir/default-present-noindex:
    pattern: /dir/default-present-noindex/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      default_filename: index.html
      index: false
  dir/default-missing-noindex:
    pattern: /dir/default-missing-noindex/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      default_filename: nonexistent-file
      index: false
  dir/indextemplate:
    pattern: /dir/indextemplate/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      index: true
      index_template: index.template.html
  dir/no-indextemplate:
    pattern: /dir/no-indextemplate/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      index: true
      index_template: nonexistent.template.html
  dir/nonexistent-file:
    pattern: /dir/nonexistent-file
    handler: FileHandler
    kwargs:
      path: nonexistent-file
  dir/single-file:
    pattern: /dir/single-file/(.*)
    handler: FileHandler
    kwargs:
      path: dir/text.txt
  dir/normalize/slash:
    pattern: /dir/normalize/slash/(.*)/
    handler: FileHandler
    kwargs:
      path: dir
  dir/normalize/dot:
    pattern: /./dir/./normalize/./dot/./(.*)
    handler: FileHandler
    kwargs:
      path: dir
  dir/normalize/dotdot:
    pattern: /abc/../dir/normalize/abc/../dotdot/(.*)
    handler: FileHandler
    kwargs:
      path: dir
  dir/transform:
    pattern: /dir/transform/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      transform:
        "*.md":
          encoding: utf-8
          function: markdown.markdown(content)
          headers:
            Content-Type: text/html; charset=UTF-8
        "*.yaml":
          encoding: utf-8
          function: badgerfish(content, handler)
          headers:
            Content-Type: text/html; charset=UTF-8
        "template.*":
          encoding: utf-8
          function: template(content, handler=handler, param='x')
          headers:
            Content-Type: text/html; charset=UTF-8
        "template-handler.txt":
            encoding: utf-8
            function: template
  dir/template:
    pattern: "/dir/template/(.*)"
    handler: FileHandler
    kwargs:
      path: dir/
      template: '*'
  dir/template-true:
    pattern: "/dir/template-true/(.*)"
    handler: FileHandler
    kwargs:
      path: dir/
      template: true
  dir/template-index:
    pattern: "/dir/template-index/(.*)"
    handler: FileHandler
    kwargs:
      path: dir/
      template: 'index*'
  dir/args:
    pattern: /dir/args/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      default_filename: index.html
      transform:
        'index.html':
          function: utils.args_as_json(handler)
  dir/merge.txt:
    pattern: /dir/merge.txt
    handler: FileHandler
    kwargs:
      path:
        - dir/alpha.txt
        - dir/beta.html
      transform:
        'alpha.txt':
          encoding: utf-8
          function: six.text_type.upper(content)
        'beta.html':
          encoding: utf-8
          function: six.text_type.title(content)
  dir/merge.html:
    pattern: /dir/merge.html
    handler: FileHandler
    kwargs:
      path:
        - dir/beta.html
        - dir/alpha.txt
      transform:
        'beta.html':
          encoding: utf-8
          function: six.text_type.upper(content)
        'alpha.txt':
          encoding: utf-8
          function: six.text_type.title(content)
  dir/headers:
    pattern: /header/
    handler: FileHandler
    kwargs:
      path: dir/index.html
      headers:
        X-FileHandler-Header: updated
        X-FileHandler: updated

  dir/data:
    pattern: /dir/data                # Check that a pattern without brackets works
    handler: FileHandler
    kwargs:
      path: dir/data.csv
      headers:
        Content-Type: text/plain      # Test header overriding
        Content-Disposition: null     # Test header clearing

  dir/pattern-text:
    pattern: "/dir/pattern/(.*)/text"
    handler: FileHandler
    kwargs:
      path: "dir/*.txt"

  dir/pattern-html:
    pattern: "/dir/pattern/(.*)\\.web"
    handler: FileHandler
    kwargs:
      path: "dir/*.html"

  dir/pattern-subdir:
    pattern: "/dir/pattern/(.*)/sub"
    handler: FileHandler
    kwargs:
      path: "dir/*/text.txt"

  dir/ignore-file:
    pattern: "/dir/ignore-file/(.*)"
    handler: FileHandler
    kwargs:
      path: dir/
      ignore: ignore-file.txt

  dir/ignore-list:
    pattern: "/dir/ignore-list/(.*)"
    handler: FileHandler
    kwargs:
      path: dir/
      ignore:
        - ignore-list.txt

  # Allow overrides global handler ignores
  dir/allow-file:
    pattern: "/dir/allow-file/(.*)"
    handler: FileHandler
    kwargs:
      path: dir/
      allow: gramex.yaml

  # Allow overrides local ignores
  dir/allow-ignore:
    pattern: "/dir/allow-ignore/(.*)"
    handler: FileHandler
    kwargs:
      path: dir/
      ignore: ignore-file.txt
      allow: ignore-file.txt

  dir/ignore-all-except:
    pattern: "/dir/ignore-all-except/(.*)"
    handler: FileHandler
    kwargs:
      path: dir/
      default_filename: index.html
      ignore: '*'
      allow: index.html

  methods/get-only:
    pattern: /methods/get-only
    handler: FileHandler
    kwargs:
      path: index.template.html
      methods: GET
      xsrf_cookies: false
  methods/head-put-delete:
    pattern: /methods/head-put-delete
    handler: FileHandler
    kwargs:
      path: index.template.html
      methods: [HEAD, put, DELete]
      xsrf_cookies: false

  # TestQueryHandler for Sqlite
  querydata/csv:
    pattern: /datastoreq/sqlite/csv/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      sql: >
        select * from actors limit cast(:limit as integer)
      parameters: {encoding: utf8}
      default: {format: csv}
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.csv
      xsrf_cookies: false

  querydata/json:
    pattern: /datastoreq/sqlite/json/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      sql: >
        select * from actors where name = :name
      parameters: {encoding: utf8}
      default: {format: json}
      headers: {X-Test: abc}
      xsrf_cookies: false

  querydata/html:
    pattern: /datastoreq/sqlite/html/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      sql: >
        select * from actors where votes > cast(:votes as integer)
      parameters: {encoding: utf8}
      default: {format: html}
      headers: {X-Test: abc}
      xsrf_cookies: false

  querydata/likename:
    pattern: /datastoreq/sqlite/json/like/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      sql: >
        select * from actors where name like replace(:name,'*','%')
      parameters: {encoding: utf8}
      default: {format: json}
      headers: {X-Test: abc}
      xsrf_cookies: false

  querydata/mysql_csv:
    pattern: /datastoreq/mysql/csv/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_queryhandler
      sql: >
        SELECT category,name,rating,votes from (
          SELECT
            @i:=@i+1 AS iterator,
            t.*
          FROM
          actors AS t,
          (SELECT @i:=0) AS foo
        ) X
        where iterator < cast(coalesce(:limit,'1000') as SIGNED) + 1
      parameters: {encoding: utf8}
      default: {format: csv}
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.csv
      xsrf_cookies: false

  querydata/mysql_json:
    pattern: /datastoreq/mysql/json/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_queryhandler
      sql: >
        select * from actors where name = :name
      parameters: {encoding: utf8}
      default: {format: json}
      headers: {X-Test: abc}
      xsrf_cookies: false

  querydata/mysql_html:
    pattern: /datastoreq/mysql/html/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_queryhandler
      sql: >
        select * from actors where votes > cast(:votes as signed)
      parameters: {encoding: utf8}
      default: {format: html}
      headers: {X-Test: abc}
      xsrf_cookies: false

  querydata/mysql_likename:
    pattern: /datastoreq/mysql/json/like/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_queryhandler
      sql: >
        select * from actors where name like replace(:name,'*','%')
      parameters: {encoding: utf8}
      default: {format: json}
      headers: {X-Test: abc}
      xsrf_cookies: false

  querydata/postgresql_csv:
    pattern: /datastoreq/postgresql/csv/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_queryhandler
      sql: >
        select * from actors limit cast(:limit as integer)
      parameters: {encoding: utf8}
      default: {format: csv}
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.csv
      xsrf_cookies: false

  querydata/postgresql_json:
    pattern: /datastoreq/postgresql/json/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_queryhandler
      sql: >
        select * from actors where name = :name
      parameters: {encoding: utf8}
      default: {format: json}
      headers: {X-Test: abc}
      xsrf_cookies: false

  querydata/postgresql_html:
    pattern: /datastoreq/postgresql/html/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_queryhandler
      sql: >
        select * from actors where votes > cast(:votes as integer)
      parameters: {encoding: utf8}
      default: {format: html}
      headers: {X-Test: abc}
      xsrf_cookies: false

  querydata/postgresql_likename:
    pattern: /datastoreq/postgresql/json/like/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_queryhandler
      sql: >
        select * from actors where name like replace(:name,'*','%')
      parameters: {encoding: utf8}
      default: {format: json}
      headers: {X-Test: abc}
      xsrf_cookies: false

  querydata/sqlite_validate:
    pattern: /datastoreq/sqlite/validate/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      sql: >
        select * from actors
        where name = :name
      parameters: {encoding: utf8}
      default: {format: csv}
      xsrf_cookies: false

  querydata/mysql_validate:
    pattern: /datastoreq/mysql/validate/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_queryhandler
      sql: >
        select * from actors
        where name = :name
      parameters: {encoding: utf8}
      default: {format: csv}
      xsrf_cookies: false

  querydata/postgresql_validate:
    pattern: /datastoreq/postgresql/validate/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_queryhandler
      sql: >
        select * from actors
        where name = :name
      parameters: {encoding: utf8}
      default: {format: csv}
      xsrf_cookies: false

  querydata/sqlite_insert:
    pattern: /datastoreq/sqlite/insert/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      sql: >
        insert into actors(category,name,rating,votes)
        values(:category,:name,:rating,:votes)
      parameters: {encoding: utf8}
      xsrf_cookies: false

  querydata/sqlite_edit:
    pattern: /datastoreq/sqlite/edit/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      sql: >
        update actors
        set votes = cast(:votes as integer)
        where name = :name
      parameters: {encoding: utf8}
      xsrf_cookies: false

  querydata/sqlite_delete:
    pattern: /datastoreq/sqlite/delete/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      sql: >
        delete from actors where name = :name
      parameters: {encoding: utf8}
      xsrf_cookies: false

  querydata/mysql_insert:
    pattern: /datastoreq/mysql/insert/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_queryhandler
      sql: >
        insert into actors(category,name,rating,votes)
        values(:category,:name,:rating,:votes)
      parameters: {encoding: utf8}
      xsrf_cookies: false

  querydata/mysql_edit:
    pattern: /datastoreq/mysql/edit/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_queryhandler
      sql: >
        update actors
        set votes = cast(:votes as SIGNED)
        where name = :name
      parameters: {encoding: utf8}
      xsrf_cookies: false

  querydata/mysql_delete:
    pattern: /datastoreq/mysql/delete/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_queryhandler
      sql: >
        delete from actors where name = :name
      parameters: {encoding: utf8}
      xsrf_cookies: false

  querydata/postgresql_insert:
    pattern: /datastoreq/postgresql/insert/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_queryhandler
      sql: >
        insert into actors(category,name,rating,votes)
        values(
          nullif(:category,''),
          nullif(:name,''),
          cast(coalesce(nullif(:rating,''),'0') as float),
          cast(coalesce(nullif(:votes,''),'0') as integer)
        )
      parameters: {encoding: utf8}
      xsrf_cookies: false

  querydata/postgresql_edit:
    pattern: /datastoreq/postgresql/edit/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_queryhandler
      sql: >
        update actors
        set votes = cast(:votes as integer)
        where name = :name
      parameters: {encoding: utf8}
      xsrf_cookies: false

  querydata/postgresql_delete:
    pattern: /datastoreq/postgresql/delete/
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_queryhandler
      sql: >
        delete from actors where name = :name
      parameters: {encoding: utf8}
      xsrf_cookies: false

  querydata/filename:
    pattern: /datastoreq/sqlite/csv/filename
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      sql: >
        select * from actors limit cast(:limit as integer)
      parameters: {encoding: utf8}
      default: {format: csv, filename: top_actors.csv}

  querydata/multiquery:
    pattern: /datastoreq/sqlite/multiquery
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      sql:
        name: select name from actors limit 5
        votes: select votes from actors limit 5
      parameters: {encoding: utf8}
      default: {format: json}

  querydata/multiparams:
    pattern: /datastoreq/sqlite/multiparams
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      sql:
        name: select name from actors where votes > :votes
        votes: select votes from actors limit 5
        empty: select name from actors where category = 'nonexistent'
      parameters: {encoding: utf8}
      default: {format: json, votes: 100}
      headers: {X-Test: abc}

  querydata/template:
    pattern: /datastoreq/template
    handler: QueryHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      sql: select * from actors limit cast(:limit as integer)
      parameters: {encoding: utf8}
      default: {format: template}
      template: template.html

  data/filename:
    pattern: /datastore/sqlite/csv/filename
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: csv, filename: top_actors.csv}

  data/template:
    pattern: /datastore/template
    handler: DataHandler
    kwargs:
        driver: sqlalchemy
        url: sqlite:///actors.db
        table: actors
        default: {format: template, limit: 2}
        template: template.html

  # TestDataHandler for Sqlite
  data/csv:
    pattern: /datastore/sqlite/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: csv}
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.csv
      xsrf_cookies: false
  data/json:
    pattern: /datastore/sqlite/json/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: json}
      headers: {X-Test: abc}
      xsrf_cookies: false
  data/html:
    pattern: /datastore/sqlite/html/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: html}
      headers: {X-Test: abc}
      xsrf_cookies: false
  data/xlsx:
    pattern: /datastore/sqlite/xlsx/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: xlsx}
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.xlsx
      xsrf_cookies: false

  # Test datahandler for MySQL
  data/mysql/csv:
    pattern: /datastore/mysql/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8, connect_args: {charset: utf8}}
      default: {format: csv}
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.csv
      xsrf_cookies: false
  data/mysql/json:
    pattern: /datastore/mysql/json/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8, connect_args: {charset: utf8}}
      default: {format: json}
      headers: {X-Test: abc}
      xsrf_cookies: false
  data/mysql/html:
    pattern: /datastore/mysql/html/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8, connect_args: {charset: utf8}}
      default: {format: html}
      headers: {X-Test: abc}
      xsrf_cookies: false
  data/mysql/xlsx:
    pattern: /datastore/mysql/xlsx/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8, connect_args: {charset: utf8}}
      default: {format: xlsx}
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.xlsx
      xsrf_cookies: false

  # Test datahandler for PostgreSQL
  data/postgresql/csv:
    pattern: /datastore/postgresql/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: csv}
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.csv
      xsrf_cookies: false
  data/postgresql/json:
    pattern: /datastore/postgresql/json/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: json}
      headers: {X-Test: abc}
      xsrf_cookies: false
  data/postgresql/html:
    pattern: /datastore/postgresql/html/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: html}
      headers: {X-Test: abc}
      xsrf_cookies: false
  data/postgresql/xlsx:
    pattern: /datastore/postgresql/xlsx/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: postgresql://postgres@$POSTGRES_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: xlsx}
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.xlsx
      xsrf_cookies: false

  # TestDataHandler for blaze sqlite
  data/blaze/csv:
    pattern: /datastore/blazesqlite/csv/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: csv}
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.csv
      xsrf_cookies: false
  data/blaze/json:
    pattern: /datastore/blazesqlite/json/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: json}
      headers: {X-Test: abc}
      xsrf_cookies: false
  data/blaze/html:
    pattern: /datastore/blazesqlite/html/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: html}
      headers: {X-Test: abc}
      xsrf_cookies: false
  data/blaze/xlsx:
    pattern: /datastore/blazesqlite/xlsx/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      default: {format: xlsx}
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.xlsx
      xsrf_cookies: false

  # Test datahandler for blaze MySQL
  data/blazemysql/csv:
    pattern: /datastore/blazemysql/csv/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: csv}
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.csv
      xsrf_cookies: false
  data/blazemysql/json:
    pattern: /datastore/blazemysql/json/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: json}
      headers: {X-Test: abc}
      xsrf_cookies: false
  data/blazemysql/html:
    pattern: /datastore/blazemysql/html/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: html}
      headers: {X-Test: abc}
      xsrf_cookies: false
  data/blazemysql/xlsx:
    pattern: /datastore/blazemysql/xlsx/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: mysql+pymysql://root@$MYSQL_SERVER/test_datahandler
      table: actors
      parameters: {encoding: utf8}
      default: {format: xlsx}
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.xlsx
      xsrf_cookies: false

  # TestDataHandlerConfig for Sqlite
  data/sqliteconfig1/csv:
    pattern: /datastore/sqliteconfig1/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
        where: [votes<120]
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.csv
      xsrf_cookies: false
  data/sqliteconfig2/csv:
    pattern: /datastore/sqliteconfig2/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
        where: votes<120
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.csv
      xsrf_cookies: false
  data/sqliteconfig3/csv:
    pattern: /datastore/sqliteconfig3/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
      query:
        where: votes<120
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.csv
      xsrf_cookies: false
  data/sqliteconfig4/csv:
    pattern: /datastore/sqliteconfig4/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
        select: ["rating", "votes"]
      query:
        where: votes<120
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.csv
      xsrf_cookies: false
  data/sqliteconfig5/csv:
    pattern: /datastore/sqliteconfig5/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
        select:
          rating: "any-value"
          votes:
      query:
        where: votes<120
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.csv
      xsrf_cookies: false
  data/sqliteconfig6/csv:
    pattern: /datastore/sqliteconfig6/csv/
    handler: DataHandler
    kwargs:
      driver: blaze
      url: sqlite:///actors.db
      table: actors
      default:
        format: csv
        select: ["category", "votenu"]
        groupby: "category"
      query:
        agg:
          ratemean: mean(rating)
          votenu: nunique(votes)
        where:
          votes: "<120"
          rating: ">0.4"
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.csv
      xsrf_cookies: false
  data/sqliteconfig7/csv:
    pattern: /datastore/sqliteconfig7/csv/
    handler: DataHandler
    kwargs:
      driver: sqlalchemy
      url: sqlite:///actors.db
      table: actors
      parameters: {encoding: utf8}
      query:
        format: csv
        where: [votes<120]
        limit: 5
      headers:
        X-Test: abc
        Content-Disposition: attachment;filename=alpha.csv
      xsrf_cookies: false

  formhandler/file:
    pattern: /formhandler/file
    handler: FormHandler
    kwargs:
      url: sales.xlsx

  formhandler/mysql:
    pattern: /formhandler/mysql
    handler: FormHandler
    kwargs:
      url: mysql+pymysql://root@$MYSQL_SERVER/test_formhandler?charset=utf8
      table: sales

  formhandler/postgres:
    pattern: /formhandler/postgres
    handler: FormHandler
    kwargs:
      url: postgresql://postgres@$POSTGRES_SERVER/test_formhandler
      table: sales

  formhandler/sqlite:
    pattern: /formhandler/sqlite
    handler: FormHandler
    kwargs:
      url: sqlite:///formhandler.db
      table: sales

  formhandler/file-multi:
    pattern: /formhandler/file-multi
    handler: FormHandler
    kwargs:
      big:
        url: sales.xlsx
        sheetname: sales
        function: data[data['sales'] > 100]
      by-growth:
        url: sales.xlsx
        function: data.sort_values('growth')

  formhandler/sqlite-multi:
    pattern: /formhandler/sqlite-multi
    handler: FormHandler
    kwargs:
      big:
        url: sqlite:///formhandler.db
        table: sales
        query: 'SELECT * FROM sales WHERE sales > 100'
      by-growth:
        url: sqlite:///formhandler.db
        table: sales
        function: data.sort_values('growth')
      big-by-growth:
        url: sqlite:///formhandler.db
        table: sales
        query: 'SELECT * FROM sales WHERE sales > 100'
        function: data.sort_values('growth')

  capture:
    pattern: /capture
    handler: CaptureHandler

  process/args:
    pattern: /process/args
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
  process/args-pipe:
    pattern: /process/args-pipe
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
      stdout: pipe
      stderr: pipe
  process/args-no-stderr:
    pattern: /process/args-no-stderr
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
      stderr: false
  process/args-no-stdout:
    pattern: /process/args-no-stdout
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
      stdout: false
  process/args-stdout-file:
    pattern: /process/args-stdout-file
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
      stdout: $YAMLPATH/processtest.stdout
  process/args-both-file:
    pattern: /process/args-both-file
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
      stdout: $YAMLPATH/processtest.both
      stderr: $YAMLPATH/processtest.both
  process/args-multi-file:
    pattern: /process/args-multi-file
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
      stdout: [$YAMLPATH/processtest.stdout.1, $YAMLPATH/processtest.stdout.2, pipe]
      stderr: [$YAMLPATH/processtest.stderr.1, $YAMLPATH/processtest.stderr.2, pipe]
  process/shell:
    pattern: /process/shell
    handler: ProcessHandler
    kwargs:
      args: 'python $YAMLPATH/processtest.py a 1 "x y"'
      shell: True
  process/cwd:
    pattern: /process/cwd
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
      cwd: "${YAMLPATH}/../"
  process/nonexistent-command:
    pattern: /process/nonexistent-command
    handler: ProcessHandler
    kwargs:
      args: nonexistent-command
  process/error:
    pattern: /process/error
    handler: ProcessHandler
    kwargs:
      args: [python, "$YAMLPATH/throwerror.py"]

  httpbin:
    pattern: /httpbin
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin
  cache/randomchar-nocache:
    pattern: /cache/randomchar-nocache
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin(handler, rand=99999999)
  cache/randomchar:
    pattern: /cache/randomchar
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin(handler, rand=99999999, mime="html")
    cache: true
  cache/increment:
    pattern: /cache/increment
    handler: FunctionHandler
    kwargs:
      function: utils.increment
    cache: true
  cache/increment2:
    pattern: /cache/increment2
    handler: FunctionHandler
    kwargs:
      function: utils.increment
    cache: true
  cache/increment-headers-dummy:
    pattern: /cache/increment-headers-dummy
    handler: FunctionHandler
    kwargs:
      function: utils.increment
      headers:
        Content-Type: text/plain
    cache: true
  cache/increment-headers:
    pattern: /cache/increment-headers
    handler: FunctionHandler
    kwargs:
      function: utils.increment
      headers:
        Content-Type: text/plain
    cache: true
  cache/pathkey:
    pattern: /cache/pathkey
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin(handler, rand=99999999, mime='json')
    cache:
      key: request.path
  cache/host:
    pattern: /cache/host.*
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin(handler, rand=99999999)
    cache:
      key: request.host
  cache/args:
    pattern: /cache/args.*
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin(handler, rand=99999999)
    cache:
      key: [request.path, args.x, invalid.key]
  cache/cookie-test:
    pattern: /cache/cookie-test
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin(handler, rand=99999999)
    cache:
      key: [request.host, cookies.user, invalid.key]
  cache/header-test:
    pattern: /cache/header-test
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin(handler, rand=99999999)
    cache:
      key: [request.host, headers.test, invalid.key]
  cache/invalid-keys-ignored:
    pattern: /cache/invalid-keys-ignored.*
    handler: FunctionHandler
    kwargs:
      function: utils.httpbin
      kwargs: {rand: 99999999}
    cache:
      key: [invalid, invalid.invalid]
  cache/filehandler:
    pattern: /cache/filehandler/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      allow: .cache-file*
    cache: true
  cache/filehandler-errors:
    pattern: /cache/filehandler-error/(.*)
    handler: FileHandler
    kwargs:
      path: dir
      allow: .cache-file*
    cache:
        status: [200, 404]
  cache/subprocess:
    pattern: /cache/subprocess
    handler: FunctionHandler
    kwargs:
      function: utils.subprocess

  json/get:
    pattern: /json/get/(.*)
    handler: JSONHandler
    kwargs:
      data:
        x: "1"
        y: {z: 2}
        z: [a, b, {m: 1, n: 2}]
  json/write:
    pattern: /json/write/(.*)
    handler: JSONHandler
    kwargs:
      xsrf_cookies: false
  json/path:
    pattern: /json/path/(.*)
    handler: JSONHandler
    kwargs:
      path: $YAMLPATH/.jsonpath/jsonhandler.json
      xsrf_cookies: false

  api/twitter:
    pattern: /api/twitter/(.*)
    handler: TwitterRESTHandler
    kwargs:
      # Gramener > Gramex guide app: https://apps.twitter.com/app/12449610/keys
      key: XkCVNZD5sfWECxHGAGnlHGQFa
      secret: yU00bx5dHYMbge9IyO5H1KeC5uFnWndntG7u6CH6O4HDZHQg0p
      access_key: 445767176-pqio8PuGlpzULSstlZQbLhRqFJfNBjWFH5LqNRgI
      access_secret: zVosr4wIS3aM80hErmWUkMePZ6vX830yI7VKxar6xZqgp
      xsrf_cookies: false

  api/twitter-get:
    pattern: /api/twitter-get/(.*)
    handler: TwitterRESTHandler
    kwargs:
      # Gramener > Gramex guide app: https://apps.twitter.com/app/12449610/keys
      key: XkCVNZD5sfWECxHGAGnlHGQFa
      secret: yU00bx5dHYMbge9IyO5H1KeC5uFnWndntG7u6CH6O4HDZHQg0p
      access_key: 445767176-pqio8PuGlpzULSstlZQbLhRqFJfNBjWFH5LqNRgI
      access_secret: zVosr4wIS3aM80hErmWUkMePZ6vX830yI7VKxar6xZqgp
      methods: GET
      xsrf_cookies: false

  upload:
    pattern: /upload
    handler: UploadHandler
    kwargs:
      path: $YAMLPATH/uploads
      keys:
        file: [image, text, unknown]
        delete: rm
        # save: save        # Leave this at the default
      xsrf_cookies: false

  upload-error:
    pattern: /upload-error
    handler: UploadHandler
    kwargs:
      path: $YAMLPATH/uploads
      if_exists: error
      xsrf_cookies: false

  upload-overwrite:
    pattern: /upload-overwrite
    handler: UploadHandler
    kwargs:
      path: $YAMLPATH/uploads
      if_exists: overwrite
      xsrf_cookies: false

  upload-backup:
    pattern: /upload-backup
    handler: UploadHandler
    kwargs:
      path: $YAMLPATH/uploads
      if_exists: backup
      xsrf_cookies: false

  upload-transform:
    pattern: /upload-transform
    handler: UploadHandler
    kwargs:
      path: $YAMLPATH/uploads
      xsrf_cookies: false
      transform:
        function: utils.upload_transform(content)

  # If the transform does not return a dict, ignore it (logging an error)
  upload-transform-blank:
    pattern: /upload-transform-blank
    handler: UploadHandler
    kwargs:
      path: $YAMLPATH/uploads
      xsrf_cookies: false
      transform:
        function: six.text_type('')

  upload-transform-invalid-transform:
    pattern: /upload-transform
    handler: UploadHandler
    kwargs:
      path: $YAMLPATH/uploads
      xsrf_cookies: false
      transform: invalid-transform

  auth/session:
    pattern: /auth/session
    handler: FunctionHandler
    kwargs:
      function: utils.session
      headers:
        Content-Type: application/json

  auth/otp:
    pattern: /auth/otp
    handler: FunctionHandler
    kwargs:
      function: utils.otp
      headers:
        Content-Type: application/json

  auth/logout:
    pattern: /auth/logout
    handler: LogoutHandler
    kwargs:
      redirect:
        query: next
        header: NEXT
        url: /dir/index/

  auth/ldap:
    pattern: /auth/ldap
    handler: LDAPAuth
    kwargs:
      template: $YAMLPATH/auth.html       # This has the login form
      host: ipa.demo1.freeipa.org         # Server to connect to
      use_ssl: true                       # Whether to use SSL or not
      user: 'uid={user},cn=users,cn=accounts,dc=demo1,dc=freeipa,dc=org'
      password: '{password}'
      xsrf_cookies: false

  auth/ldap2-bind:                          # Test the "bind" mode of LDAP auth
    pattern: /auth/ldap2-bind
    handler: LDAPAuth
    kwargs:
      template: $YAMLPATH/auth.html
      host: ldap.forumsys.com
      use_ssl: false                      # ldap.forumsys.com does not accept SSL
      bind:                               # By default, bind as this user
        user: 'uid=euler,dc=example,dc=com'
        password: 'password'
      search:
        base: 'dc=example,dc=com'       # Search in this domain
        filter: '(mail={user})'         # Using a mail ID filter
        password: '{password}'          # and the password field as password
      xsrf_cookies: false

  auth/ldap2-bind-wrong-bind:               # Test the "bind" mode of LDAP auth with a wrong bind
    pattern: /auth/ldap2-bind-wrong-bind
    handler: LDAPAuth
    kwargs:
      template: $YAMLPATH/auth.html
      host: ldap.forumsys.com
      use_ssl: false                      # ldap.forumsys.com does not accept SSL
      bind:                               # By default, bind as this user
        user: 'uid=euler,dc=example,dc=com'
        password: 'wrong-password'      # This will fail. We test for that.
      search:
        base: 'dc=example,dc=com'       # Search in this domain
        filter: '(mail={user})'         # Using a mail ID filter
        password: '{password}'          # and the password field as password
      xsrf_cookies: false

  auth/simple:
    pattern: /auth/simple
    handler: SimpleAuth
    kwargs:
      template: $YAMLPATH/auth.html
      user: {arg: user}
      password: {arg: password}
      credentials:
        alpha: alpha
        beta: beta
        gamma:
          password: gamma
          role: user
      delay: [0.2, 0.4]
      redirect:
        query: next
        header: NEXT
        url: /dir/index/
      action:
        -
          function: utils.set_session
          kwargs:
            action_set: true
        -
          function: ensure_single_session
      xsrf_cookies: false

  auth/template:
    pattern: /auth/template
    handler: SimpleAuth
    kwargs:
      template: $YAMLPATH/authtemplate.html
      user: {arg: user}
      password: {arg: password}
      credentials:
        alpha: alpha

  auth/db:
    pattern: /auth/db
    handler: DBAuth
    kwargs:
      template: $YAMLPATH/auth.html
      # This is created by schedule.create-user-database
      url: 'mysql+pymysql://root@${MYSQL_SERVER}/test_auth'
      table: users
      user:
          column: user
          arg: user
      password:
          column: password
          arg: password
          function: utils.encrypt(handler, content)
      delay: [0.2, 0.4]
      redirect:
          query: next
          header: NEXT
          url: /dir/index/
      xsrf_cookies: false

  auth/functionhandler:
    pattern: /auth/functionhandler
    handler: FunctionHandler
    kwargs:
      auth: true
      function: six.text_type
      args: 'OK'
      xsrf_cookies: false
  auth/filehandler:
    pattern: /auth/filehandler
    handler: FileHandler
    kwargs:
      auth: true
      path: dir/alpha.txt
      xsrf_cookies: false
  auth/datahandler:
    pattern: /auth/datahandler
    handler: DataHandler
    kwargs:
      auth: true
      driver: blaze
      url: actors.csv
      xsrf_cookies: false
  auth/jsonhandler:
    pattern: /auth/jsonhandler/(.*)
    handler: JSONHandler
    kwargs:
      auth: true
      data: {x: 1}
      xsrf_cookies: false
  auth/processhandler:
    pattern: /auth/processhandler
    handler: ProcessHandler
    kwargs:
      auth: true
      args: [python, "$YAMLPATH/processtest.py", a, '1', 'x y']
      xsrf_cookies: false
  auth/twitterresthandler:
    pattern: /auth/twitterresthandler
    handler: TwitterRESTHandler
    kwargs:
      auth: true
      # Gramener > Gramex guide app: https://apps.twitter.com/app/12449610/keys
      key: XkCVNZD5sfWECxHGAGnlHGQFa
      secret: yU00bx5dHYMbge9IyO5H1KeC5uFnWndntG7u6CH6O4HDZHQg0p
      access_key: 445767176-pqio8PuGlpzULSstlZQbLhRqFJfNBjWFH5LqNRgI
      access_secret: zVosr4wIS3aM80hErmWUkMePZ6vX830yI7VKxar6xZqgp
      xsrf_cookies: false
  auth/uploadhandler:
    pattern: /auth/uploadhandler
    handler: UploadHandler
    kwargs:
      auth: true
      path: $YAMLPATH/uploads
      methods: GET
      xsrf_cookies: false
  auth/membership:
    pattern: /auth/membership
    handler: FileHandler
    kwargs:
      path: dir/alpha.txt
      auth:
        membership:
          user: [alpha, beta]
      xsrf_cookies: false
  auth/memberships:
    pattern: /auth/memberships
    handler: FileHandler
    kwargs:
      path: dir/alpha.txt
      auth:
        membership:
          -
            user: alpha
          -
            user: beta
      xsrf_cookies: false
  auth/condition:
    pattern: /auth/condition
    handler: FileHandler
    kwargs:
      path: dir/alpha.txt
      auth:
        condition:
          function: str.endswith
          args: [=handler.current_user.user, 'ta']        # beta, delta
      xsrf_cookies: false
  auth/login-url:
    pattern: /auth/login-url
    handler: FileHandler
    kwargs:
      auth:
        login_url: /auth/simple
      path: dir/alpha.txt
      xsrf_cookies: false
  auth/unauthorized-template:
    pattern: /auth/unauthorized-template
    handler: FileHandler
    kwargs:
      path: dir/alpha.txt
      xsrf_cookies: false
      auth:
        membership:
          user: beta
        template: 403-template.html

  xsrf:
    pattern: /xsrf
    handler: FunctionHandler
    kwargs:
      function: "str"
      args: "xsrf"
      set_xsrf: true
  xsrf/yes:
    pattern: /xsrf/yes
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/dir/index.html
      xsrf_cookies: true
  xsrf/no:
    pattern: /xsrf/no
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/dir/index.html
      xsrf_cookies: false

  logtest:
    pattern: /logtest
    handler: FunctionHandler
    kwargs:
      function: utils.log_format
      log:
        format: '%(time)f|%(method)s|%(uri)s|%(ip)s|%(status)s|%(duration)s|%(user)s|%(error)s|%(args.x)s|%(request.protocol)s|%(headers.head)s|%(cookies.sid)s|%(user.id)s|%(env.HOME)s'

  logcsv:
    pattern: /logcsv
    handler: FunctionHandler
    kwargs:
      function: utils.log_csv
      log:
        format: csv
        path: $YAMLPATH/requests.log
        keys: [time, method, uri, ip, status, duration, user, error, args.x, request.protocol, headers.head, cookies.sid, user.email, env.HOME]

  error/404-template:
    pattern: /error/404-template(.*)
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/dir/
      error:
        404:
          path: $YAMLPATH/error-404.json
          autoescape: false
          whitespace: single
  error/500-function:
    pattern: /error/500-function
    handler: FunctionHandler
    kwargs:
      function: utils.zero_division_error
      error:
        500:
          function: utils.handle_error
          headers:
            Content-Type: application/json

  ws/socket:
    pattern: /ws/socket
    handler: WebSocketHandler
    kwargs:
      open:
        function: utils.ws_open
      on_message:
        function: utils.ws_on_message
      on_close:
        function: utils.ws_on_close

  ws/socket-auth:
    pattern: /ws/auth
    handler: WebSocketHandler
    kwargs:
      auth:
        membership:
          id: alpha
      open:
        function: utils.ws_open
      on_message:
        function: utils.ws_on_message
      on_close:
        function: utils.ws_on_close

  ws/info:
    pattern: /ws/info
    handler: FunctionHandler
    kwargs:
      function: utils.ws_info_dump
      headers:
        Content-Type: application/json

# Display Gramex logs on console with indentation
log:
    version: 1
    root:
      level: DEBUG
      handlers:
        - error
    handlers:
      error:
        class: logging.StreamHandler
        level: INFO
        stream: ext://sys.stdout
        formatter: inline
    formatters:
      inline:
        format: '        %(message)s'

watch:
  watch_template:
    paths: watcher.txt
    on_modified: utils.on_modified
    on_created: utils.on_created
    on_deleted: utils.on_deleted
  watch_patterns:
    paths:
      - dir/
      - watch.*.test
    on_created: utils.on_created
    on_modified: utils.on_modified
    on_deleted: utils.on_deleted
  no-paths: {}
  no-events:
    paths: dir
  invalid-event:
    paths: dir
    on_modified: nonexistent            # This should not throw an error, only report a warning

schedule:
  schedule-startup-set-key:
    function: utils.slow_count          # Set global value schedule-key to 1
    args: ['schedule-key', 1]
    startup: true
  schedule-startup-slow:
    function: utils.slow_count          # Set global schedule-count every 10ms
    args: 'schedule-count'
    kwargs: {count: 1000}
    startup: true
    thread: true

# Import from all subdirectories
import: {subdir: '*/gramex.yaml'}
